// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: standard_cyborg/proto/sc3d/polygon_label.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fsc3d_2fpolygon_5flabel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fsc3d_2fpolygon_5flabel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "standard_cyborg/proto/math/core.pb.h"
#include "standard_cyborg/proto/sc3d/qc_status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fsc3d_2fpolygon_5flabel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_standard_5fcyborg_2fproto_2fsc3d_2fpolygon_5flabel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpolygon_5flabel_2eproto;
namespace standard_cyborg {
namespace proto {
namespace sc3d {
class PolygonLabel;
class PolygonLabelDefaultTypeInternal;
extern PolygonLabelDefaultTypeInternal _PolygonLabel_default_instance_;
class PolygonLabel_SubPolygon;
class PolygonLabel_SubPolygonDefaultTypeInternal;
extern PolygonLabel_SubPolygonDefaultTypeInternal _PolygonLabel_SubPolygon_default_instance_;
}  // namespace sc3d
}  // namespace proto
}  // namespace standard_cyborg
PROTOBUF_NAMESPACE_OPEN
template<> ::standard_cyborg::proto::sc3d::PolygonLabel* Arena::CreateMaybeMessage<::standard_cyborg::proto::sc3d::PolygonLabel>(Arena*);
template<> ::standard_cyborg::proto::sc3d::PolygonLabel_SubPolygon* Arena::CreateMaybeMessage<::standard_cyborg::proto::sc3d::PolygonLabel_SubPolygon>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace standard_cyborg {
namespace proto {
namespace sc3d {

// ===================================================================

class PolygonLabel_SubPolygon :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:standard_cyborg.proto.sc3d.PolygonLabel.SubPolygon) */ {
 public:
  PolygonLabel_SubPolygon();
  virtual ~PolygonLabel_SubPolygon();

  PolygonLabel_SubPolygon(const PolygonLabel_SubPolygon& from);
  PolygonLabel_SubPolygon(PolygonLabel_SubPolygon&& from) noexcept
    : PolygonLabel_SubPolygon() {
    *this = ::std::move(from);
  }

  inline PolygonLabel_SubPolygon& operator=(const PolygonLabel_SubPolygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolygonLabel_SubPolygon& operator=(PolygonLabel_SubPolygon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PolygonLabel_SubPolygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolygonLabel_SubPolygon* internal_default_instance() {
    return reinterpret_cast<const PolygonLabel_SubPolygon*>(
               &_PolygonLabel_SubPolygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PolygonLabel_SubPolygon& a, PolygonLabel_SubPolygon& b) {
    a.Swap(&b);
  }
  inline void Swap(PolygonLabel_SubPolygon* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PolygonLabel_SubPolygon* New() const final {
    return CreateMaybeMessage<PolygonLabel_SubPolygon>(nullptr);
  }

  PolygonLabel_SubPolygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PolygonLabel_SubPolygon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PolygonLabel_SubPolygon& from);
  void MergeFrom(const PolygonLabel_SubPolygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolygonLabel_SubPolygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "standard_cyborg.proto.sc3d.PolygonLabel.SubPolygon";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpolygon_5flabel_2eproto);
    return ::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpolygon_5flabel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionsFieldNumber = 1,
    kFlagFieldNumber = 3,
  };
  // repeated .standard_cyborg.proto.math.Vec2 positions = 1;
  int positions_size() const;
  private:
  int _internal_positions_size() const;
  public:
  void clear_positions();
  ::standard_cyborg::proto::math::Vec2* mutable_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::standard_cyborg::proto::math::Vec2 >*
      mutable_positions();
  private:
  const ::standard_cyborg::proto::math::Vec2& _internal_positions(int index) const;
  ::standard_cyborg::proto::math::Vec2* _internal_add_positions();
  public:
  const ::standard_cyborg::proto::math::Vec2& positions(int index) const;
  ::standard_cyborg::proto::math::Vec2* add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::standard_cyborg::proto::math::Vec2 >&
      positions() const;

  // bool flag = 3;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:standard_cyborg.proto.sc3d.PolygonLabel.SubPolygon)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::standard_cyborg::proto::math::Vec2 > positions_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_standard_5fcyborg_2fproto_2fsc3d_2fpolygon_5flabel_2eproto;
};
// -------------------------------------------------------------------

class PolygonLabel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:standard_cyborg.proto.sc3d.PolygonLabel) */ {
 public:
  PolygonLabel();
  virtual ~PolygonLabel();

  PolygonLabel(const PolygonLabel& from);
  PolygonLabel(PolygonLabel&& from) noexcept
    : PolygonLabel() {
    *this = ::std::move(from);
  }

  inline PolygonLabel& operator=(const PolygonLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolygonLabel& operator=(PolygonLabel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PolygonLabel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolygonLabel* internal_default_instance() {
    return reinterpret_cast<const PolygonLabel*>(
               &_PolygonLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PolygonLabel& a, PolygonLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(PolygonLabel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PolygonLabel* New() const final {
    return CreateMaybeMessage<PolygonLabel>(nullptr);
  }

  PolygonLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PolygonLabel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PolygonLabel& from);
  void MergeFrom(const PolygonLabel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolygonLabel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "standard_cyborg.proto.sc3d.PolygonLabel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpolygon_5flabel_2eproto);
    return ::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpolygon_5flabel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PolygonLabel_SubPolygon SubPolygon;

  // accessors -------------------------------------------------------

  enum : int {
    kSubPolygonsFieldNumber = 2,
    kScImagePathFieldNumber = 4,
    kQcStatusFieldNumber = 11,
  };
  // repeated .standard_cyborg.proto.sc3d.PolygonLabel.SubPolygon subPolygons = 2;
  int subpolygons_size() const;
  private:
  int _internal_subpolygons_size() const;
  public:
  void clear_subpolygons();
  ::standard_cyborg::proto::sc3d::PolygonLabel_SubPolygon* mutable_subpolygons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::standard_cyborg::proto::sc3d::PolygonLabel_SubPolygon >*
      mutable_subpolygons();
  private:
  const ::standard_cyborg::proto::sc3d::PolygonLabel_SubPolygon& _internal_subpolygons(int index) const;
  ::standard_cyborg::proto::sc3d::PolygonLabel_SubPolygon* _internal_add_subpolygons();
  public:
  const ::standard_cyborg::proto::sc3d::PolygonLabel_SubPolygon& subpolygons(int index) const;
  ::standard_cyborg::proto::sc3d::PolygonLabel_SubPolygon* add_subpolygons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::standard_cyborg::proto::sc3d::PolygonLabel_SubPolygon >&
      subpolygons() const;

  // string scImagePath = 4;
  void clear_scimagepath();
  const std::string& scimagepath() const;
  void set_scimagepath(const std::string& value);
  void set_scimagepath(std::string&& value);
  void set_scimagepath(const char* value);
  void set_scimagepath(const char* value, size_t size);
  std::string* mutable_scimagepath();
  std::string* release_scimagepath();
  void set_allocated_scimagepath(std::string* scimagepath);
  private:
  const std::string& _internal_scimagepath() const;
  void _internal_set_scimagepath(const std::string& value);
  std::string* _internal_mutable_scimagepath();
  public:

  // .standard_cyborg.proto.sc3d.QcStatus qcStatus = 11;
  void clear_qcstatus();
  ::standard_cyborg::proto::sc3d::QcStatus qcstatus() const;
  void set_qcstatus(::standard_cyborg::proto::sc3d::QcStatus value);
  private:
  ::standard_cyborg::proto::sc3d::QcStatus _internal_qcstatus() const;
  void _internal_set_qcstatus(::standard_cyborg::proto::sc3d::QcStatus value);
  public:

  // @@protoc_insertion_point(class_scope:standard_cyborg.proto.sc3d.PolygonLabel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::standard_cyborg::proto::sc3d::PolygonLabel_SubPolygon > subpolygons_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scimagepath_;
  int qcstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_standard_5fcyborg_2fproto_2fsc3d_2fpolygon_5flabel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PolygonLabel_SubPolygon

// repeated .standard_cyborg.proto.math.Vec2 positions = 1;
inline int PolygonLabel_SubPolygon::_internal_positions_size() const {
  return positions_.size();
}
inline int PolygonLabel_SubPolygon::positions_size() const {
  return _internal_positions_size();
}
inline ::standard_cyborg::proto::math::Vec2* PolygonLabel_SubPolygon::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.sc3d.PolygonLabel.SubPolygon.positions)
  return positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::standard_cyborg::proto::math::Vec2 >*
PolygonLabel_SubPolygon::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:standard_cyborg.proto.sc3d.PolygonLabel.SubPolygon.positions)
  return &positions_;
}
inline const ::standard_cyborg::proto::math::Vec2& PolygonLabel_SubPolygon::_internal_positions(int index) const {
  return positions_.Get(index);
}
inline const ::standard_cyborg::proto::math::Vec2& PolygonLabel_SubPolygon::positions(int index) const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.PolygonLabel.SubPolygon.positions)
  return _internal_positions(index);
}
inline ::standard_cyborg::proto::math::Vec2* PolygonLabel_SubPolygon::_internal_add_positions() {
  return positions_.Add();
}
inline ::standard_cyborg::proto::math::Vec2* PolygonLabel_SubPolygon::add_positions() {
  // @@protoc_insertion_point(field_add:standard_cyborg.proto.sc3d.PolygonLabel.SubPolygon.positions)
  return _internal_add_positions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::standard_cyborg::proto::math::Vec2 >&
PolygonLabel_SubPolygon::positions() const {
  // @@protoc_insertion_point(field_list:standard_cyborg.proto.sc3d.PolygonLabel.SubPolygon.positions)
  return positions_;
}

// bool flag = 3;
inline void PolygonLabel_SubPolygon::clear_flag() {
  flag_ = false;
}
inline bool PolygonLabel_SubPolygon::_internal_flag() const {
  return flag_;
}
inline bool PolygonLabel_SubPolygon::flag() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.PolygonLabel.SubPolygon.flag)
  return _internal_flag();
}
inline void PolygonLabel_SubPolygon::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void PolygonLabel_SubPolygon::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.sc3d.PolygonLabel.SubPolygon.flag)
}

// -------------------------------------------------------------------

// PolygonLabel

// repeated .standard_cyborg.proto.sc3d.PolygonLabel.SubPolygon subPolygons = 2;
inline int PolygonLabel::_internal_subpolygons_size() const {
  return subpolygons_.size();
}
inline int PolygonLabel::subpolygons_size() const {
  return _internal_subpolygons_size();
}
inline void PolygonLabel::clear_subpolygons() {
  subpolygons_.Clear();
}
inline ::standard_cyborg::proto::sc3d::PolygonLabel_SubPolygon* PolygonLabel::mutable_subpolygons(int index) {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.sc3d.PolygonLabel.subPolygons)
  return subpolygons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::standard_cyborg::proto::sc3d::PolygonLabel_SubPolygon >*
PolygonLabel::mutable_subpolygons() {
  // @@protoc_insertion_point(field_mutable_list:standard_cyborg.proto.sc3d.PolygonLabel.subPolygons)
  return &subpolygons_;
}
inline const ::standard_cyborg::proto::sc3d::PolygonLabel_SubPolygon& PolygonLabel::_internal_subpolygons(int index) const {
  return subpolygons_.Get(index);
}
inline const ::standard_cyborg::proto::sc3d::PolygonLabel_SubPolygon& PolygonLabel::subpolygons(int index) const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.PolygonLabel.subPolygons)
  return _internal_subpolygons(index);
}
inline ::standard_cyborg::proto::sc3d::PolygonLabel_SubPolygon* PolygonLabel::_internal_add_subpolygons() {
  return subpolygons_.Add();
}
inline ::standard_cyborg::proto::sc3d::PolygonLabel_SubPolygon* PolygonLabel::add_subpolygons() {
  // @@protoc_insertion_point(field_add:standard_cyborg.proto.sc3d.PolygonLabel.subPolygons)
  return _internal_add_subpolygons();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::standard_cyborg::proto::sc3d::PolygonLabel_SubPolygon >&
PolygonLabel::subpolygons() const {
  // @@protoc_insertion_point(field_list:standard_cyborg.proto.sc3d.PolygonLabel.subPolygons)
  return subpolygons_;
}

// string scImagePath = 4;
inline void PolygonLabel::clear_scimagepath() {
  scimagepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PolygonLabel::scimagepath() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.PolygonLabel.scImagePath)
  return _internal_scimagepath();
}
inline void PolygonLabel::set_scimagepath(const std::string& value) {
  _internal_set_scimagepath(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.sc3d.PolygonLabel.scImagePath)
}
inline std::string* PolygonLabel::mutable_scimagepath() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.sc3d.PolygonLabel.scImagePath)
  return _internal_mutable_scimagepath();
}
inline const std::string& PolygonLabel::_internal_scimagepath() const {
  return scimagepath_.GetNoArena();
}
inline void PolygonLabel::_internal_set_scimagepath(const std::string& value) {
  
  scimagepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PolygonLabel::set_scimagepath(std::string&& value) {
  
  scimagepath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:standard_cyborg.proto.sc3d.PolygonLabel.scImagePath)
}
inline void PolygonLabel::set_scimagepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scimagepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:standard_cyborg.proto.sc3d.PolygonLabel.scImagePath)
}
inline void PolygonLabel::set_scimagepath(const char* value, size_t size) {
  
  scimagepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:standard_cyborg.proto.sc3d.PolygonLabel.scImagePath)
}
inline std::string* PolygonLabel::_internal_mutable_scimagepath() {
  
  return scimagepath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PolygonLabel::release_scimagepath() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.sc3d.PolygonLabel.scImagePath)
  
  return scimagepath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PolygonLabel::set_allocated_scimagepath(std::string* scimagepath) {
  if (scimagepath != nullptr) {
    
  } else {
    
  }
  scimagepath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scimagepath);
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.sc3d.PolygonLabel.scImagePath)
}

// .standard_cyborg.proto.sc3d.QcStatus qcStatus = 11;
inline void PolygonLabel::clear_qcstatus() {
  qcstatus_ = 0;
}
inline ::standard_cyborg::proto::sc3d::QcStatus PolygonLabel::_internal_qcstatus() const {
  return static_cast< ::standard_cyborg::proto::sc3d::QcStatus >(qcstatus_);
}
inline ::standard_cyborg::proto::sc3d::QcStatus PolygonLabel::qcstatus() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.PolygonLabel.qcStatus)
  return _internal_qcstatus();
}
inline void PolygonLabel::_internal_set_qcstatus(::standard_cyborg::proto::sc3d::QcStatus value) {
  
  qcstatus_ = value;
}
inline void PolygonLabel::set_qcstatus(::standard_cyborg::proto::sc3d::QcStatus value) {
  _internal_set_qcstatus(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.sc3d.PolygonLabel.qcStatus)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sc3d
}  // namespace proto
}  // namespace standard_cyborg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fsc3d_2fpolygon_5flabel_2eproto
