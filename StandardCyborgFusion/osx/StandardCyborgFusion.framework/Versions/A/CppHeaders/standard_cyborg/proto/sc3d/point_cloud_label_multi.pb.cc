// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: standard_cyborg/proto/sc3d/point_cloud_label_multi.proto

#include "standard_cyborg/proto/sc3d/point_cloud_label_multi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointCloudLabelMulti_PointCloudLabel_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto;
namespace standard_cyborg {
namespace proto {
namespace sc3d {
class PointCloudLabelMulti_PointCloudLabelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointCloudLabelMulti_PointCloudLabel> _instance;
} _PointCloudLabelMulti_PointCloudLabel_default_instance_;
class PointCloudLabelMultiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointCloudLabelMulti> _instance;
} _PointCloudLabelMulti_default_instance_;
}  // namespace sc3d
}  // namespace proto
}  // namespace standard_cyborg
static void InitDefaultsscc_info_PointCloudLabelMulti_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::standard_cyborg::proto::sc3d::_PointCloudLabelMulti_default_instance_;
    new (ptr) ::standard_cyborg::proto::sc3d::PointCloudLabelMulti();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::standard_cyborg::proto::sc3d::PointCloudLabelMulti::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PointCloudLabelMulti_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PointCloudLabelMulti_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto}, {
      &scc_info_PointCloudLabelMulti_PointCloudLabel_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto.base,}};

static void InitDefaultsscc_info_PointCloudLabelMulti_PointCloudLabel_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::standard_cyborg::proto::sc3d::_PointCloudLabelMulti_PointCloudLabel_default_instance_;
    new (ptr) ::standard_cyborg::proto::sc3d::PointCloudLabelMulti_PointCloudLabel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::standard_cyborg::proto::sc3d::PointCloudLabelMulti_PointCloudLabel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointCloudLabelMulti_PointCloudLabel_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PointCloudLabelMulti_PointCloudLabel_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::PointCloudLabelMulti_PointCloudLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::PointCloudLabelMulti_PointCloudLabel, indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::PointCloudLabelMulti, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::PointCloudLabelMulti, labels_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::PointCloudLabelMulti, qcstatus_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::PointCloudLabelMulti, scgeometrypath_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::standard_cyborg::proto::sc3d::PointCloudLabelMulti_PointCloudLabel)},
  { 6, -1, sizeof(::standard_cyborg::proto::sc3d::PointCloudLabelMulti)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::standard_cyborg::proto::sc3d::_PointCloudLabelMulti_PointCloudLabel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::standard_cyborg::proto::sc3d::_PointCloudLabelMulti_default_instance_),
};

const char descriptor_table_protodef_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8standard_cyborg/proto/sc3d/point_cloud"
  "_label_multi.proto\022\032standard_cyborg.prot"
  "o.sc3d\032*standard_cyborg/proto/sc3d/qc_st"
  "atus.proto\"\334\001\n\024PointCloudLabelMulti\022P\n\006l"
  "abels\030\002 \003(\0132@.standard_cyborg.proto.sc3d"
  ".PointCloudLabelMulti.PointCloudLabel\0226\n"
  "\010qcStatus\030\003 \001(\0162$.standard_cyborg.proto."
  "sc3d.QcStatus\022\026\n\016scGeometryPath\030\004 \001(\t\032\"\n"
  "\017PointCloudLabel\022\017\n\007indices\030\001 \003(\005b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto_deps[1] = {
  &::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fqc_5fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto_sccs[2] = {
  &scc_info_PointCloudLabelMulti_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto.base,
  &scc_info_PointCloudLabelMulti_PointCloudLabel_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto_once;
static bool descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto = {
  &descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto_initialized, descriptor_table_protodef_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto, "standard_cyborg/proto/sc3d/point_cloud_label_multi.proto", 361,
  &descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto_once, descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto_sccs, descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto::offsets,
  file_level_metadata_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto, 2, file_level_enum_descriptors_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto, file_level_service_descriptors_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto), true);
namespace standard_cyborg {
namespace proto {
namespace sc3d {

// ===================================================================

void PointCloudLabelMulti_PointCloudLabel::InitAsDefaultInstance() {
}
class PointCloudLabelMulti_PointCloudLabel::_Internal {
 public:
};

PointCloudLabelMulti_PointCloudLabel::PointCloudLabelMulti_PointCloudLabel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:standard_cyborg.proto.sc3d.PointCloudLabelMulti.PointCloudLabel)
}
PointCloudLabelMulti_PointCloudLabel::PointCloudLabelMulti_PointCloudLabel(const PointCloudLabelMulti_PointCloudLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      indices_(from.indices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:standard_cyborg.proto.sc3d.PointCloudLabelMulti.PointCloudLabel)
}

void PointCloudLabelMulti_PointCloudLabel::SharedCtor() {
}

PointCloudLabelMulti_PointCloudLabel::~PointCloudLabelMulti_PointCloudLabel() {
  // @@protoc_insertion_point(destructor:standard_cyborg.proto.sc3d.PointCloudLabelMulti.PointCloudLabel)
  SharedDtor();
}

void PointCloudLabelMulti_PointCloudLabel::SharedDtor() {
}

void PointCloudLabelMulti_PointCloudLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointCloudLabelMulti_PointCloudLabel& PointCloudLabelMulti_PointCloudLabel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointCloudLabelMulti_PointCloudLabel_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto.base);
  return *internal_default_instance();
}


void PointCloudLabelMulti_PointCloudLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:standard_cyborg.proto.sc3d.PointCloudLabelMulti.PointCloudLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indices_.Clear();
  _internal_metadata_.Clear();
}

const char* PointCloudLabelMulti_PointCloudLabel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointCloudLabelMulti_PointCloudLabel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:standard_cyborg.proto.sc3d.PointCloudLabelMulti.PointCloudLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 indices = 1;
  {
    int byte_size = _indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_indices(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:standard_cyborg.proto.sc3d.PointCloudLabelMulti.PointCloudLabel)
  return target;
}

size_t PointCloudLabelMulti_PointCloudLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:standard_cyborg.proto.sc3d.PointCloudLabelMulti.PointCloudLabel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 indices = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointCloudLabelMulti_PointCloudLabel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:standard_cyborg.proto.sc3d.PointCloudLabelMulti.PointCloudLabel)
  GOOGLE_DCHECK_NE(&from, this);
  const PointCloudLabelMulti_PointCloudLabel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointCloudLabelMulti_PointCloudLabel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:standard_cyborg.proto.sc3d.PointCloudLabelMulti.PointCloudLabel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:standard_cyborg.proto.sc3d.PointCloudLabelMulti.PointCloudLabel)
    MergeFrom(*source);
  }
}

void PointCloudLabelMulti_PointCloudLabel::MergeFrom(const PointCloudLabelMulti_PointCloudLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:standard_cyborg.proto.sc3d.PointCloudLabelMulti.PointCloudLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indices_.MergeFrom(from.indices_);
}

void PointCloudLabelMulti_PointCloudLabel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:standard_cyborg.proto.sc3d.PointCloudLabelMulti.PointCloudLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloudLabelMulti_PointCloudLabel::CopyFrom(const PointCloudLabelMulti_PointCloudLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:standard_cyborg.proto.sc3d.PointCloudLabelMulti.PointCloudLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloudLabelMulti_PointCloudLabel::IsInitialized() const {
  return true;
}

void PointCloudLabelMulti_PointCloudLabel::InternalSwap(PointCloudLabelMulti_PointCloudLabel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  indices_.InternalSwap(&other->indices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointCloudLabelMulti_PointCloudLabel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PointCloudLabelMulti::InitAsDefaultInstance() {
}
class PointCloudLabelMulti::_Internal {
 public:
};

PointCloudLabelMulti::PointCloudLabelMulti()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:standard_cyborg.proto.sc3d.PointCloudLabelMulti)
}
PointCloudLabelMulti::PointCloudLabelMulti(const PointCloudLabelMulti& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scgeometrypath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scgeometrypath().empty()) {
    scgeometrypath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scgeometrypath_);
  }
  qcstatus_ = from.qcstatus_;
  // @@protoc_insertion_point(copy_constructor:standard_cyborg.proto.sc3d.PointCloudLabelMulti)
}

void PointCloudLabelMulti::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PointCloudLabelMulti_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto.base);
  scgeometrypath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  qcstatus_ = 0;
}

PointCloudLabelMulti::~PointCloudLabelMulti() {
  // @@protoc_insertion_point(destructor:standard_cyborg.proto.sc3d.PointCloudLabelMulti)
  SharedDtor();
}

void PointCloudLabelMulti::SharedDtor() {
  scgeometrypath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PointCloudLabelMulti::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointCloudLabelMulti& PointCloudLabelMulti::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointCloudLabelMulti_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_5fmulti_2eproto.base);
  return *internal_default_instance();
}


void PointCloudLabelMulti::Clear() {
// @@protoc_insertion_point(message_clear_start:standard_cyborg.proto.sc3d.PointCloudLabelMulti)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  scgeometrypath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  qcstatus_ = 0;
  _internal_metadata_.Clear();
}

const char* PointCloudLabelMulti::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .standard_cyborg.proto.sc3d.PointCloudLabelMulti.PointCloudLabel labels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.sc3d.QcStatus qcStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_qcstatus(static_cast<::standard_cyborg::proto::sc3d::QcStatus>(val));
        } else goto handle_unusual;
        continue;
      // string scGeometryPath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_scgeometrypath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "standard_cyborg.proto.sc3d.PointCloudLabelMulti.scGeometryPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointCloudLabelMulti::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:standard_cyborg.proto.sc3d.PointCloudLabelMulti)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .standard_cyborg.proto.sc3d.PointCloudLabelMulti.PointCloudLabel labels = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_labels(i), target, stream);
  }

  // .standard_cyborg.proto.sc3d.QcStatus qcStatus = 3;
  if (this->qcstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_qcstatus(), target);
  }

  // string scGeometryPath = 4;
  if (this->scgeometrypath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scgeometrypath().data(), static_cast<int>(this->_internal_scgeometrypath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "standard_cyborg.proto.sc3d.PointCloudLabelMulti.scGeometryPath");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_scgeometrypath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:standard_cyborg.proto.sc3d.PointCloudLabelMulti)
  return target;
}

size_t PointCloudLabelMulti::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:standard_cyborg.proto.sc3d.PointCloudLabelMulti)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .standard_cyborg.proto.sc3d.PointCloudLabelMulti.PointCloudLabel labels = 2;
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string scGeometryPath = 4;
  if (this->scgeometrypath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scgeometrypath());
  }

  // .standard_cyborg.proto.sc3d.QcStatus qcStatus = 3;
  if (this->qcstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_qcstatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointCloudLabelMulti::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:standard_cyborg.proto.sc3d.PointCloudLabelMulti)
  GOOGLE_DCHECK_NE(&from, this);
  const PointCloudLabelMulti* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointCloudLabelMulti>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:standard_cyborg.proto.sc3d.PointCloudLabelMulti)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:standard_cyborg.proto.sc3d.PointCloudLabelMulti)
    MergeFrom(*source);
  }
}

void PointCloudLabelMulti::MergeFrom(const PointCloudLabelMulti& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:standard_cyborg.proto.sc3d.PointCloudLabelMulti)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.scgeometrypath().size() > 0) {

    scgeometrypath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scgeometrypath_);
  }
  if (from.qcstatus() != 0) {
    _internal_set_qcstatus(from._internal_qcstatus());
  }
}

void PointCloudLabelMulti::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:standard_cyborg.proto.sc3d.PointCloudLabelMulti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloudLabelMulti::CopyFrom(const PointCloudLabelMulti& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:standard_cyborg.proto.sc3d.PointCloudLabelMulti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloudLabelMulti::IsInitialized() const {
  return true;
}

void PointCloudLabelMulti::InternalSwap(PointCloudLabelMulti* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  scgeometrypath_.Swap(&other->scgeometrypath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(qcstatus_, other->qcstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointCloudLabelMulti::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sc3d
}  // namespace proto
}  // namespace standard_cyborg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::standard_cyborg::proto::sc3d::PointCloudLabelMulti_PointCloudLabel* Arena::CreateMaybeMessage< ::standard_cyborg::proto::sc3d::PointCloudLabelMulti_PointCloudLabel >(Arena* arena) {
  return Arena::CreateInternal< ::standard_cyborg::proto::sc3d::PointCloudLabelMulti_PointCloudLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::standard_cyborg::proto::sc3d::PointCloudLabelMulti* Arena::CreateMaybeMessage< ::standard_cyborg::proto::sc3d::PointCloudLabelMulti >(Arena* arena) {
  return Arena::CreateInternal< ::standard_cyborg::proto::sc3d::PointCloudLabelMulti >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
