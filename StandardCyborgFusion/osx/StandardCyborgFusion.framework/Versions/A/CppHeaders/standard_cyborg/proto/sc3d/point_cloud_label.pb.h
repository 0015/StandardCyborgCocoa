// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: standard_cyborg/proto/sc3d/point_cloud_label.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "standard_cyborg/proto/sc3d/qc_status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_2eproto;
namespace standard_cyborg {
namespace proto {
namespace sc3d {
class PointCloudLabel;
class PointCloudLabelDefaultTypeInternal;
extern PointCloudLabelDefaultTypeInternal _PointCloudLabel_default_instance_;
}  // namespace sc3d
}  // namespace proto
}  // namespace standard_cyborg
PROTOBUF_NAMESPACE_OPEN
template<> ::standard_cyborg::proto::sc3d::PointCloudLabel* Arena::CreateMaybeMessage<::standard_cyborg::proto::sc3d::PointCloudLabel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace standard_cyborg {
namespace proto {
namespace sc3d {

// ===================================================================

class PointCloudLabel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:standard_cyborg.proto.sc3d.PointCloudLabel) */ {
 public:
  PointCloudLabel();
  virtual ~PointCloudLabel();

  PointCloudLabel(const PointCloudLabel& from);
  PointCloudLabel(PointCloudLabel&& from) noexcept
    : PointCloudLabel() {
    *this = ::std::move(from);
  }

  inline PointCloudLabel& operator=(const PointCloudLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloudLabel& operator=(PointCloudLabel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointCloudLabel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointCloudLabel* internal_default_instance() {
    return reinterpret_cast<const PointCloudLabel*>(
               &_PointCloudLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PointCloudLabel& a, PointCloudLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloudLabel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloudLabel* New() const final {
    return CreateMaybeMessage<PointCloudLabel>(nullptr);
  }

  PointCloudLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloudLabel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloudLabel& from);
  void MergeFrom(const PointCloudLabel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloudLabel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "standard_cyborg.proto.sc3d.PointCloudLabel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_2eproto);
    return ::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndicesFieldNumber = 1,
    kScGeometryPathFieldNumber = 3,
    kQcStatusFieldNumber = 11,
  };
  // repeated int32 indices = 1;
  int indices_size() const;
  private:
  int _internal_indices_size() const;
  public:
  void clear_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_indices() const;
  void _internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 indices(int index) const;
  void set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_indices();

  // string scGeometryPath = 3;
  void clear_scgeometrypath();
  const std::string& scgeometrypath() const;
  void set_scgeometrypath(const std::string& value);
  void set_scgeometrypath(std::string&& value);
  void set_scgeometrypath(const char* value);
  void set_scgeometrypath(const char* value, size_t size);
  std::string* mutable_scgeometrypath();
  std::string* release_scgeometrypath();
  void set_allocated_scgeometrypath(std::string* scgeometrypath);
  private:
  const std::string& _internal_scgeometrypath() const;
  void _internal_set_scgeometrypath(const std::string& value);
  std::string* _internal_mutable_scgeometrypath();
  public:

  // .standard_cyborg.proto.sc3d.QcStatus qcStatus = 11;
  void clear_qcstatus();
  ::standard_cyborg::proto::sc3d::QcStatus qcstatus() const;
  void set_qcstatus(::standard_cyborg::proto::sc3d::QcStatus value);
  private:
  ::standard_cyborg::proto::sc3d::QcStatus _internal_qcstatus() const;
  void _internal_set_qcstatus(::standard_cyborg::proto::sc3d::QcStatus value);
  public:

  // @@protoc_insertion_point(class_scope:standard_cyborg.proto.sc3d.PointCloudLabel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > indices_;
  mutable std::atomic<int> _indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scgeometrypath_;
  int qcstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PointCloudLabel

// repeated int32 indices = 1;
inline int PointCloudLabel::_internal_indices_size() const {
  return indices_.size();
}
inline int PointCloudLabel::indices_size() const {
  return _internal_indices_size();
}
inline void PointCloudLabel::clear_indices() {
  indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointCloudLabel::_internal_indices(int index) const {
  return indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointCloudLabel::indices(int index) const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.PointCloudLabel.indices)
  return _internal_indices(index);
}
inline void PointCloudLabel::set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.sc3d.PointCloudLabel.indices)
}
inline void PointCloudLabel::_internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Add(value);
}
inline void PointCloudLabel::add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_indices(value);
  // @@protoc_insertion_point(field_add:standard_cyborg.proto.sc3d.PointCloudLabel.indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PointCloudLabel::_internal_indices() const {
  return indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PointCloudLabel::indices() const {
  // @@protoc_insertion_point(field_list:standard_cyborg.proto.sc3d.PointCloudLabel.indices)
  return _internal_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PointCloudLabel::_internal_mutable_indices() {
  return &indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PointCloudLabel::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:standard_cyborg.proto.sc3d.PointCloudLabel.indices)
  return _internal_mutable_indices();
}

// .standard_cyborg.proto.sc3d.QcStatus qcStatus = 11;
inline void PointCloudLabel::clear_qcstatus() {
  qcstatus_ = 0;
}
inline ::standard_cyborg::proto::sc3d::QcStatus PointCloudLabel::_internal_qcstatus() const {
  return static_cast< ::standard_cyborg::proto::sc3d::QcStatus >(qcstatus_);
}
inline ::standard_cyborg::proto::sc3d::QcStatus PointCloudLabel::qcstatus() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.PointCloudLabel.qcStatus)
  return _internal_qcstatus();
}
inline void PointCloudLabel::_internal_set_qcstatus(::standard_cyborg::proto::sc3d::QcStatus value) {
  
  qcstatus_ = value;
}
inline void PointCloudLabel::set_qcstatus(::standard_cyborg::proto::sc3d::QcStatus value) {
  _internal_set_qcstatus(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.sc3d.PointCloudLabel.qcStatus)
}

// string scGeometryPath = 3;
inline void PointCloudLabel::clear_scgeometrypath() {
  scgeometrypath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PointCloudLabel::scgeometrypath() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.PointCloudLabel.scGeometryPath)
  return _internal_scgeometrypath();
}
inline void PointCloudLabel::set_scgeometrypath(const std::string& value) {
  _internal_set_scgeometrypath(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.sc3d.PointCloudLabel.scGeometryPath)
}
inline std::string* PointCloudLabel::mutable_scgeometrypath() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.sc3d.PointCloudLabel.scGeometryPath)
  return _internal_mutable_scgeometrypath();
}
inline const std::string& PointCloudLabel::_internal_scgeometrypath() const {
  return scgeometrypath_.GetNoArena();
}
inline void PointCloudLabel::_internal_set_scgeometrypath(const std::string& value) {
  
  scgeometrypath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PointCloudLabel::set_scgeometrypath(std::string&& value) {
  
  scgeometrypath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:standard_cyborg.proto.sc3d.PointCloudLabel.scGeometryPath)
}
inline void PointCloudLabel::set_scgeometrypath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scgeometrypath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:standard_cyborg.proto.sc3d.PointCloudLabel.scGeometryPath)
}
inline void PointCloudLabel::set_scgeometrypath(const char* value, size_t size) {
  
  scgeometrypath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:standard_cyborg.proto.sc3d.PointCloudLabel.scGeometryPath)
}
inline std::string* PointCloudLabel::_internal_mutable_scgeometrypath() {
  
  return scgeometrypath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PointCloudLabel::release_scgeometrypath() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.sc3d.PointCloudLabel.scGeometryPath)
  
  return scgeometrypath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PointCloudLabel::set_allocated_scgeometrypath(std::string* scgeometrypath) {
  if (scgeometrypath != nullptr) {
    
  } else {
    
  }
  scgeometrypath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scgeometrypath);
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.sc3d.PointCloudLabel.scGeometryPath)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sc3d
}  // namespace proto
}  // namespace standard_cyborg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_5flabel_2eproto
