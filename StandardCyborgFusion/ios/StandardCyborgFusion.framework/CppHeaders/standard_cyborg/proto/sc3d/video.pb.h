// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: standard_cyborg/proto/sc3d/video.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fsc3d_2fvideo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fsc3d_2fvideo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "standard_cyborg/proto/math/tensor.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fsc3d_2fvideo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_standard_5fcyborg_2fproto_2fsc3d_2fvideo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fvideo_2eproto;
namespace standard_cyborg {
namespace proto {
namespace sc3d {
class Video;
class VideoDefaultTypeInternal;
extern VideoDefaultTypeInternal _Video_default_instance_;
}  // namespace sc3d
}  // namespace proto
}  // namespace standard_cyborg
PROTOBUF_NAMESPACE_OPEN
template<> ::standard_cyborg::proto::sc3d::Video* Arena::CreateMaybeMessage<::standard_cyborg::proto::sc3d::Video>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace standard_cyborg {
namespace proto {
namespace sc3d {

// ===================================================================

class Video :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:standard_cyborg.proto.sc3d.Video) */ {
 public:
  Video();
  virtual ~Video();

  Video(const Video& from);
  Video(Video&& from) noexcept
    : Video() {
    *this = ::std::move(from);
  }

  inline Video& operator=(const Video& from) {
    CopyFrom(from);
    return *this;
  }
  inline Video& operator=(Video&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Video& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Video* internal_default_instance() {
    return reinterpret_cast<const Video*>(
               &_Video_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Video& a, Video& b) {
    a.Swap(&b);
  }
  inline void Swap(Video* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Video* New() const final {
    return CreateMaybeMessage<Video>(nullptr);
  }

  Video* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Video>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Video& from);
  void MergeFrom(const Video& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Video* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "standard_cyborg.proto.sc3d.Video";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fvideo_2eproto);
    return ::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fvideo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileExtensionFieldNumber = 1,
    kBytesFieldNumber = 2,
  };
  // string fileExtension = 1;
  void clear_fileextension();
  const std::string& fileextension() const;
  void set_fileextension(const std::string& value);
  void set_fileextension(std::string&& value);
  void set_fileextension(const char* value);
  void set_fileextension(const char* value, size_t size);
  std::string* mutable_fileextension();
  std::string* release_fileextension();
  void set_allocated_fileextension(std::string* fileextension);
  private:
  const std::string& _internal_fileextension() const;
  void _internal_set_fileextension(const std::string& value);
  std::string* _internal_mutable_fileextension();
  public:

  // .standard_cyborg.proto.math.Tensor bytes = 2;
  bool has_bytes() const;
  private:
  bool _internal_has_bytes() const;
  public:
  void clear_bytes();
  const ::standard_cyborg::proto::math::Tensor& bytes() const;
  ::standard_cyborg::proto::math::Tensor* release_bytes();
  ::standard_cyborg::proto::math::Tensor* mutable_bytes();
  void set_allocated_bytes(::standard_cyborg::proto::math::Tensor* bytes);
  private:
  const ::standard_cyborg::proto::math::Tensor& _internal_bytes() const;
  ::standard_cyborg::proto::math::Tensor* _internal_mutable_bytes();
  public:

  // @@protoc_insertion_point(class_scope:standard_cyborg.proto.sc3d.Video)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fileextension_;
  ::standard_cyborg::proto::math::Tensor* bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_standard_5fcyborg_2fproto_2fsc3d_2fvideo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Video

// string fileExtension = 1;
inline void Video::clear_fileextension() {
  fileextension_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Video::fileextension() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.Video.fileExtension)
  return _internal_fileextension();
}
inline void Video::set_fileextension(const std::string& value) {
  _internal_set_fileextension(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.sc3d.Video.fileExtension)
}
inline std::string* Video::mutable_fileextension() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.sc3d.Video.fileExtension)
  return _internal_mutable_fileextension();
}
inline const std::string& Video::_internal_fileextension() const {
  return fileextension_.GetNoArena();
}
inline void Video::_internal_set_fileextension(const std::string& value) {
  
  fileextension_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Video::set_fileextension(std::string&& value) {
  
  fileextension_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:standard_cyborg.proto.sc3d.Video.fileExtension)
}
inline void Video::set_fileextension(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fileextension_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:standard_cyborg.proto.sc3d.Video.fileExtension)
}
inline void Video::set_fileextension(const char* value, size_t size) {
  
  fileextension_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:standard_cyborg.proto.sc3d.Video.fileExtension)
}
inline std::string* Video::_internal_mutable_fileextension() {
  
  return fileextension_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Video::release_fileextension() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.sc3d.Video.fileExtension)
  
  return fileextension_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Video::set_allocated_fileextension(std::string* fileextension) {
  if (fileextension != nullptr) {
    
  } else {
    
  }
  fileextension_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fileextension);
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.sc3d.Video.fileExtension)
}

// .standard_cyborg.proto.math.Tensor bytes = 2;
inline bool Video::_internal_has_bytes() const {
  return this != internal_default_instance() && bytes_ != nullptr;
}
inline bool Video::has_bytes() const {
  return _internal_has_bytes();
}
inline const ::standard_cyborg::proto::math::Tensor& Video::_internal_bytes() const {
  const ::standard_cyborg::proto::math::Tensor* p = bytes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::standard_cyborg::proto::math::Tensor*>(
      &::standard_cyborg::proto::math::_Tensor_default_instance_);
}
inline const ::standard_cyborg::proto::math::Tensor& Video::bytes() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.Video.bytes)
  return _internal_bytes();
}
inline ::standard_cyborg::proto::math::Tensor* Video::release_bytes() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.sc3d.Video.bytes)
  
  ::standard_cyborg::proto::math::Tensor* temp = bytes_;
  bytes_ = nullptr;
  return temp;
}
inline ::standard_cyborg::proto::math::Tensor* Video::_internal_mutable_bytes() {
  
  if (bytes_ == nullptr) {
    auto* p = CreateMaybeMessage<::standard_cyborg::proto::math::Tensor>(GetArenaNoVirtual());
    bytes_ = p;
  }
  return bytes_;
}
inline ::standard_cyborg::proto::math::Tensor* Video::mutable_bytes() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.sc3d.Video.bytes)
  return _internal_mutable_bytes();
}
inline void Video::set_allocated_bytes(::standard_cyborg::proto::math::Tensor* bytes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bytes_);
  }
  if (bytes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bytes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bytes, submessage_arena);
    }
    
  } else {
    
  }
  bytes_ = bytes;
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.sc3d.Video.bytes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sc3d
}  // namespace proto
}  // namespace standard_cyborg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fsc3d_2fvideo_2eproto
